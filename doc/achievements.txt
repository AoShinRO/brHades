====================
//= Documentação rAthena ================================
//= Estrutura do Banco de Dados de Conquistas
//===== By: ==================================================
//= Equipe de Desenvolvimento do rAthena
//===== Última Atualização: ========================================
//= 20200220
//===== Descrição: =========================================
//= Explicação do arquivo achievements_db.yml e sua estrutura.
//============================================================

Id: ID único da conquista.

Group: Tipo de grupo de conquista. Cada tipo de conquista chama uma verificação objetiva específica.
Grupos válidos:
None - Pode ser usado para conquistas personalizadas concedidas por meio de um script, sem eventos de gatilho.
Add_Friend - Acionado quando um jogador adiciona um amigo.
Adventure - Não é acionado automaticamente. São acionados pelo comando de script achievementcomplete.
Baby - Acionado quando um jogador se torna um personagem de classe iniciante.
Battle - Acionado quando um jogador mata um monstro.
Chatting - Aegis usa isso ao falar com um NPC. São acionados pelo comando de script achievementupdate.
Chatting_Count - Acionado quando um jogador tem uma sala de bate-papo aberta e outros jogadores entram.
Chatting_Create - Acionado quando um jogador cria uma sala de bate-papo.
Chatting_Dying - Acionado quando um jogador cria uma sala de bate-papo e morre com ela aberta.
Eat - Desconhecido.
Get_Item - Acionado quando um jogador obtém um item com um valor de venda específico.
Get_Zeny - Acionado quando um jogador obtém uma quantidade específica de Zeny de uma vez.
Goal_Achieve - Acionado quando a classificação de uma conquista de um jogador aumenta.
Goal_Level - Acionado quando o nível base ou o nível de classe de um jogador muda.
Goal_Status - Acionado quando os atributos base de um jogador mudam.
Job_Change - Acionado quando a classe de um jogador muda.
Marry - Acionado quando dois jogadores se casam.
Party - Acionado quando um jogador cria um grupo.
Enchant_Fail - Acionado quando um jogador falha ao refinar um equipamento.
Enchant_Success - Acionado quando um jogador tem sucesso ao refinar um equipamento.
Spend_Zeny - Acionado quando um jogador gasta qualquer quantia de Zeny com vendedores.
Taming - Acionado quando um jogador domestica um monstro.

Name: Nome da conquista. Usado ao enviar recompensas através do RODEX.

Targets: Uma lista de nomes de monstros e valores de contagem necessários para a conquista.
A contagem alvo também pode ser usada para conquistas que mantêm um contador sem estar relacionado a mortes de monstros.
Limitado a MAX_ACHIEVEMENT_OBJECTIVES.

Exemplo:
// O jogador deve matar 5 Escorpiões e 10 Porings.
Targets:
- Id: 0
Mob: SCORPION
Count: 5
- Id: 1
Mob: PORING
Count: 10

Exemplo 2:
// O jogador deve ter 100 ou mais unidades de valor ARG0. O uso do valor alvo de contagem é útil para conquistas que aumentam em incrementos
// e não são verificadas em um total (UI_Type = 1).
// Por exemplo, no arquivo achievement_list.lub, UI_Type 0 é exibido como não incremental, enquanto 1 mostra uma barra de progresso de conclusão da conquista.
Condition: " ARG0 >= 100 "
Targets:
- Id: 0 // Valor do índice da matriz
Count: 100

Condition: Uma declaração condicional que deve ser atendida para que a conquista seja considerada concluída. Aceita constantes de script, variáveis do jogador e
ARGX (onde X é o valor do vetor de argumentos). Os valores ARGX são enviados do servidor para o mecanismo de script de conquista em eventos especiais.
Abaixo estão dois exemplos de como o recurso ARGX funciona.

Exemplo:
// Esta função enviará 1 argumento (ARG0) com um valor de i + 1 quando um amigo for adicionado.
achievement_update_objective(f_sd, AG_ADD_FRIEND, 1, i + 1);

Exemplo 2:
// Esta função enviará 2 argumentos (ARG0 e ARG1) com os valores do nível da arma e do nível de refinamento, respectivamente, quando um equipamento é
// refinado com sucesso.
achievement_update_objective(sd, AG_REFINE_SUCCESS, 2, sd->inventory_data[i]->wlv, sd->inventory.u.items_inventory[i].refine);

Map: Um nome de mapa usado para o grupo Chatting, que incrementa o contador com base no mapa do jogador.
AVISO: Esta opção está atualmente desabilitada até que o comportamento oficial seja confirmado.

Dependents: Uma lista de IDs de conquistas que precisam ser concluídas antes que esta conquista seja considerada concluída.

Exemplo:
// O jogador deve concluir as conquistas 10001 e 10002 primeiro.
Dependents:
10001: true
10002: true

// Usando o import, conquistas dependentes podem ser desabilitadas. O jogador agora só precisa concluir a conquista 10001.
Dependents:
10002: false

Rewards: Uma lista de recompensas concedidas ao ser concluída. Todos os campos são opcionais.
Item: Nome do item
Amount: Quantidade do item (Padrão: 1)
Script: Script de bônus
TitleId: ID do título

Score: Pontos de conquista concedidos ao ser concluída.

//===== rAthena Documentation ================================
//= Achievement Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20200220
//===== Description: =========================================
//= Explanation of the achievements_db.yml file and structure.
//============================================================

---------------------------------------

Id: Unique achievement ID.

---------------------------------------

Group: Achievement group type. Each achievement type calls a specific objective check.
Valid groups:
	None - Can be used for custom achievements that are given through a script with no trigger events.
	Add_Friend - Triggered when a player adds a friend.
	Adventure - Does not trigger automatically. These are triggered by the achievementcomplete script command.
	Baby - Triggered when a player becomes a baby job.
	Battle - Triggered when a player kills a monster.
	Chatting - Aegis uses this when talking to a NPC. These are triggered by the achievementupdate script command.
	Chatting_Count - Triggered when a player has a chatroom open and others join.
	Chatting_Create - Triggered when a player creates a chatroom.
	Chatting_Dying - Triggered when a player creates a chatroom and dies with it open.
	Eat - Unknown.
	Get_Item - Triggered when a player gets an item that has a specific sell value.
	Get_Zeny - Triggered when a player gets a specific amount of zeny at once.
	Goal_Achieve - Triggered when a player's achievement rank levels up.
	Goal_Level - Triggered when a player's base level or job level changes.
	Goal_Status - Triggered when a player's base stats changes.
	Job_Change - Triggered when a player's job changes.
	Marry - Triggered when two players get married.
	Party - Triggered when a player creates a party.
	Enchant_Fail - Triggered when a player fails to refine an equipment.
	Enchant_Success - Triggered when a player successfully refines an equipment.
	Spend_Zeny - Triggered when a player spends any amount of zeny on vendors.
	Taming - Triggered when a player tames a monster.

---------------------------------------

Name: Achievement name. Used when sending rewards through RODEX.

---------------------------------------

Targets: A list of monster names and count values that the achievement requires.
		The target count can also be used for achievements that keep a counter while not being related to monster kills.
		Capped at MAX_ACHIEVEMENT_OBJECTIVES.

Example:
  // Player must kill 5 Scorpions and 10 Poring.
  Targets:
    - Id: 0
      Mob: SCORPION
      Count: 5
    - Id: 1
      Mob: PORING
      Count: 10

Example 2:
  // Player must have 100 or more of ARG0 value. Using the count target value is useful for achievements that are increased in increments
  // and not checked for a total (UI_Type = 1).
  // IE: In the achievement_list.lub file, UI_Type 0 is displayed as non-incremental while 1 shows a progress bar of completion for the achievement.
  Condition: " ARG0 >= 100 "
  Targets:
    - Id: 0 // Array index value
      Count: 100

---------------------------------------

Condition: A conditional statement that must be met for the achievement to be considered complete. Accepts script constants, player variables, and
		   ARGX (where X is the argument vector value). The ARGX values are sent from the server to the achievement script engine on special events.
		   Below are two examples of how the ARGX feature works.

Example:
	// This function will send 1 argument (ARG0) with a value of i + 1 when a friend is added.
	achievement_update_objective(f_sd, AG_ADD_FRIEND, 1, i + 1);

Example 2:
	// This function will send 2 arguments (ARG0 and ARG1) with values of weapon level and refine level, respectively, when an equipment is
	// successfully refined.
	achievement_update_objective(sd, AG_REFINE_SUCCESS, 2, sd->inventory_data[i]->wlv, sd->inventory.u.items_inventory[i].refine);

---------------------------------------

Map: A map name that is used for the Chatting group which increments the counter based on the player's map.
NOTICE: This option is currently disabled until the official behavior is confirmed.

---------------------------------------

Dependents: A list of achievement IDs that need to be completed before this achievement is considered complete.

Example:
  // Player must complete achievements 10001 and 10002 first.
  Dependents:
    10001: true
    10002: true

  // Used with the import, dependent achievements can be disabled. The player now only requires completion of achievement 10001.
  Dependents:
    10002: false

---------------------------------------

Rewards: A list of rewards that are given on completion. All fields are optional.
  Item: Item Name
  Amount: Amount of Item (Default: 1)
  Script: Bonus Script
  TitleId: Title ID

---------------------------------------

Score: Achievement points that are given on completion.
